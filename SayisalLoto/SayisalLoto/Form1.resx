<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FvgL0RB3IPsNWpQAAAAASUVORK5CYII=
</value>
  </data>
</root>